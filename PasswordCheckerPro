import tkinter as tk
from tkinter import ttk
import string
import math

# Password strength colors and messages
COLORS = {
    "Very Weak": "#ff4d4d",
    "Weak": "#ffa64d",
    "Moderate": "#ffe44d",
    "Strong": "#70db70",
    "Very Strong": "#00b300"
}

MESSAGES = {
    "Very Weak": "Password is too short or too common. Use more characters and mix types.",
    "Weak": "Increase length and add more variety (numbers, symbols, cases).",
    "Moderate": "Decent password. For better security, add more unique characters and length.",
    "Strong": "Good password! Consider adding more unique symbols for maximum strength.",
    "Very Strong": "Excellent password! It's long, complex, and unique."
}

COMMON_PASSWORDS = set([
    'password', '123456', '123456789', 'test1', 'password1', '12345678',
    'qwerty', 'abc123', '111111', '123123', 'admin', 'letmein', 'welcome'
])

def password_entropy(password):
    """Calculate Shannon entropy for a password."""
    if not password:
        return 0
    charset = 0
    if any(c.islower() for c in password):
        charset += 26
    if any(c.isupper() for c in password):
        charset += 26
    if any(c.isdigit() for c in password):
        charset += 10
    if any(c in string.punctuation for c in password):
        charset += len(string.punctuation)
    entropy = len(password) * math.log2(charset) if charset else 0
    return entropy

def analyze_password(password):
    """Analyze password and return (score, verdict, message, color)."""
    length = len(password)
    lower = any(c.islower() for c in password)
    upper = any(c.isupper() for c in password)
    digits = any(c.isdigit() for c in password)
    symbols = any(c in string.punctuation for c in password)
    unique_chars = len(set(password))
    entropy = password_entropy(password)

    # Check for common passwords
    if password.lower() in COMMON_PASSWORDS or length < 6:
        return (1, "Very Weak", MESSAGES["Very Weak"], COLORS["Very Weak"])

    # Score based on criteria
    score = 0
    if length >= 8: score += 1
    if length >= 12: score += 1
    if unique_chars > 6: score += 1
    if lower: score += 1
    if upper: score += 1
    if digits: score += 1
    if symbols: score += 1
    if entropy > 40: score += 1
    if entropy > 60: score += 1

    # Verdict assignment
    if score <= 2:
        verdict = "Weak"
    elif score <= 4:
        verdict = "Moderate"
    elif score <= 6:
        verdict = "Strong"
    else:
        verdict = "Very Strong"

    return (score, verdict, MESSAGES[verdict], COLORS[verdict])

class PasswordStrengthApp:
    def __init__(self, root):
        self.root = root
        root.title("ðŸ”’ Advanced Password Strength Checker")
        root.geometry("500x350")
        root.configure(bg="#2c3e50")
        root.resizable(False, False)

        style = ttk.Style()
        style.theme_use('default')
        style.configure("TProgressbar", thickness=20, background="#00b300")

        tk.Label(root, text="Enter your password:", font=("Arial", 14, 'bold'), bg="#2c3e50", fg="#ecf0f1").pack(pady=20)
        self.pw_var = tk.StringVar()
        self.entry = ttk.Entry(root, textvariable=self.pw_var, show='*', font=("Arial", 14), width=30)
        self.entry.pack(pady=10)
        self.entry.bind("<KeyRelease>", self.on_key_release)

        self.strength_label = tk.Label(root, text="", font=("Arial", 16, 'bold'), bg="#2c3e50")
        self.strength_label.pack(pady=15)

        self.progress = ttk.Progressbar(root, orient="horizontal", length=400, mode="determinate")
        self.progress.pack(pady=10)

        self.feedback = tk.Label(root, text="", font=("Arial", 12), bg="#2c3e50", wraplength=480, justify="center")
        self.feedback.pack(pady=10)

    def on_key_release(self, event=None):
        password = self.pw_var.get()
        score, verdict, message, color = analyze_password(password)
        percent = min(score / 8.0 * 100, 100)
        self.progress['value'] = percent
        self.progress.configure(style="TProgressbar")
        style = ttk.Style()
        style.configure("TProgressbar", background=color)
        self.strength_label.config(text=verdict, fg=color)
        self.feedback.config(text=message, fg=color)

if __name__ == "__main__":
    root = tk.Tk()
    app = PasswordStrengthApp(root)
    root.mainloop()
